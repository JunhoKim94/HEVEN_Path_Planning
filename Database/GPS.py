import serial
import time
import sys
import os
sys.path.append(os.path.dirname(__file__))

from Flag import Flag

class GPS:
    def __init__(self, port, baud, flag: Flag):
        self.__data = None
        self.flag = flag
        self.__gps_initializing_success = False

        try:
            self.__serial = serial.Serial(port, baud, timeout=0)
            self.__gps_initializing_success = True
            print("[GPS Intializing \tOk  ]")
        except serial.serialutil.SerialException as e:
            print("[GPS Intializing \tFail] \tCheck your COMPORT: ", e)

    def main(self):
        if self.__gps_initializing_success:
            print("Start GPS \t- Success\n")
            time.sleep(1)
            self.__read_gps()
        else:
            print("Start GPS \t- Fail: \tGPS doesn't initialize succeessfully. Therefore, GPS will not run.")
        print("\t\t\t\t-->\tTerminate GPS")
              
    def __read_gps(self):
        line = list()
        while not self.flag.system_stop: # By stoping system, Reading GPS should be stopped, too.
            if self.flag.gps_stop:
                time.sleep(0.1) # Connection to GPS is Valid. But do not read data from GPS.
            else:
                for c in self.__serial.read():
                    line.append(chr(c))

                    if c == 10:
                        self.__parse_gps(line)
                        line.clear()
        time.sleep(0.1)
        print("Terminating GPS")
        self.__serial.close()


    def __parse_gps(self, data):
        tmp = ''.join(data)
        if data == ['\n']:
            return 0

        tmp = tmp.split("$")[1]
        datas = tmp.split(',')

        if datas[0] == "GNRMC":
            try:
                t = float(datas[1])
                lad = float(datas[3])
                NS = datas[4]
                lon = float(datas[5])
                EW = datas[6]
                quality = datas[2]

                self.__data = [t, lad, NS, lon, EW, quality]
            except Exception as e:
                print("[GPS Running \tError] \t\tInvalid data is generated by GPS. Check GPS status:", e)
                time.sleep(1)
            
    
    @property
    def data(self):
        return self.__data

if __name__ == "__main__":
    gps = GPS('COM3', 19200, Flag())
    gps.main()
